/**
* @fileoverview The Before Effects util module. This module adds general util methods
* that aid in working with After EFfects settings that would normall be accessed
* through app.settings.
* @author Collin D. Brooks <collin.brooks@gmail.com>
* @version 0.1.0 dev
*/

BE.provide('BE.util.SettingsManager');

BE.require('BE.log');

/**
 * Provides a way to easily store and retrieve settings that After Effects
 * should save. Settings are automatically saved on <code>set</code> and loaded
 * on <code>get</code>.
 * @example
 *   var settingsManager = BE.util.SettingsManager("My Script Name",
 *       {
 *           "settingOne": "Setting One Value",
 *           "settingTwo": "Setting Two Value"
 *       }
 *   );
 *   settingsManager.get("settingOne");  //"Setting One Value"
 *   settingsManager.set("settingOne", "New Setting One Value");
 *   settingsManager.get("settingOne");  //"New Setting One Value");
 * 
 * @param {String} sectionName The name that After Effects should use as this
 * group of setting's sectionName. This can be the name of your script.
 * @param {Object} settings An Object filled with key/value pairs to be saved
 * within After Effect's settings. If this argument is not provided, settings
 * will need to be added by using the <code>add<code> method.
 * @returns {SettingsManager} A BE.util.SettingsManager.
 * @constructor
 */

BE.util.SettingsManager = function (sectionName, settings) {

    var that = this,
        log = BE.log,
        errors = {
            NO_SETTINGS: "There are no settings associated with " +
                "this Settings Manager",
            SETTING_DOES_NOT_EXIST: "Setting does not exist!" 
        },

        version = "0.1.0 dev";

    log.debug("Initializing Settings Manager...");
    log.debug("sectionName = " + sectionName);
    log.debug("settings = " + settings.toString());

    /**
     * The name for After Effects to use as this group of settings' section
     * name.
     * @type {String}
     */
    this.sectionName = sectionName;

    log.debug("this.sectionName = " + this.sectionName);

    /**
     * The settings Object that contains the settings to be managed by this
     * SettingsManager.
     * 
     * @type {Object}
     */
    this.settings = (settings) ? settings : {};

    log.debug("this.settings = " + this.settings);

    /**
     * Checks to see if a given setting exists within this SettingsManager.
     * 
     * @param {String} settingName The name of the setting to check for
     * existence.
     * @returns {Bool} True if a given setting exists or false if it doesn't.
     */
    this.settingExists = function (settingName) {
        return (that.settings[settingName]) ? true : false;
    };

    /**
     * Checks to see if there aren't any settings associated with this
     * SettingsManager.
     * 
     * @returns {Bool} True if there aren't any settings associated with this
     * SettingsManager or false if there is at least one.
     */
    this.noSettings = function () {
        return (that.settings.length === 0) ? true : false;
    };

    /**
     * Saves all of the settings being managed by this SettingsManager. If no
     * settings exists, there is no error; the settings will simply not be
     * saved.
     * 
     * @returns {SettingsManager} The SettingsManager. Useful for chaining.
     */
    this.saveAll = function () {
        if (!that.noSettings())
        {
            var settingName;
            
            for (settingName in that.settings)
            {
                that.save(settingName);
            }
        }
        return that;
    };

    /**
     * Saves the given setting. It is an error if the setting does not exist
     * 
     * @param {String} [settingName] The setting to save or, if undefined,
     * save all settings.
     * @throws errors.SETTING_DOES_NOT_EXIST
     * @returns {SettingsManager} The SettingsManager. Useful for chaining.
     */
    this.save = function (settingName) {
        if (that.settingExists(settingName))
        {
            app.settings.saveSetting(that.sectionName, settingName,
                that.settings[settingName]);
        } else {
            throw(errors.SETTING_DOES_NOT_EXIST + " Cannot save setting " +
            "\"" + settingName + "\" because it does not exist.");
        }
        return that;
    };

    /**
     * Loads a single setting. It is an error if the given setting does not
     * exist.
     * 
     * @param {String} settingName The name of the setting to load.
     * @throws errors.SETTING_DOES_NOT_EXIST
     * @returns {SettingsManager} The SettingsManager. Useful for chaining.
     */
    this.load = function (settingName) {
        if (that.settingExists(settingName))
        {
            that.settings[settingName] =
                app.settings.getSetting(that.sectionName, settingName);
        } else {
            throw(errors.SETTING_DOES_NOT_EXIST + " Cannot load setting " +
                "\"" + settingName + "\" because it does not exist.");
        }
        return that;
    };

    /**
     * Loads all of the settings being managed by this SettingsManager. It is an
     * error if no settings have been registered with this SettingsManager.
     * 
     * @throws errors.NO_SETTINGS
     * @returns {SettingsManager} The SettingsManager. Useful for chaining.
     */
    this.loadAll = function () {
        if (that.settings.length === 0)
        {
            throw("Cannot load all settings because " + errors.NO_SETTINGS);
        }

        var settingName;
        
        for (settingName in that.settings)
        {
            that.save(settingName);
        }
        return that;
    };

    /**
     * Returns the current value of a setting. It is an error if the given
     * setting does not exist.
     * 
     * @param {String} settingName The name of the setting to get the value for.
     * @throws errors.SETTING_DOES_NOT_EXIST
     * @returns {String} The value of the given setting.
     */
    this.get = function (settingName) {
        if (that.settingExists(settingName))
        {
            that.load(settingName);
            return that.settings[settingName];
        } else {
            throw(errors.SETTING_DOES_NOT_EXIST + " Cannot get setting " +
                "\"" + settingName + "\" because it does not exist.");
        }
    };

    /**
     * Sets a setting value. If a setting doesn't exist, the setting is created.
     * 
     * @returns {SettingsManager} The SettingsManager. Useful for chaining.
     */
    this.set = function (settingName, settingValue) {
        that.settings[settingName] = settingValue;
        that.save(settingName);
        return that;
    };

    log.debug("Returning SettingsManager Version: " + this.version);
    return this;
};
