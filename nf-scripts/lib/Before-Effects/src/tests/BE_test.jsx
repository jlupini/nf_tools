/** * @fileoverview The script tests the base functionality of the BE object. * NOTE: It is assumed both TB and BE have been sourced. See * beforeeffects_tests.jsx to customize the overall BE test. * @author <a href="mailto:collin.brooks@gmail.com">Collin Brooks</a> * @version 0.1.0 dev */TB.module('BE');TB.test('BE Main', function () {    var x = 0,        blah,        s = "this is a string",        t = false,        f = function() {},        a = {one: "1", two: "2"},        b = {},        c = {},        ar = [],        d = new Date();    TB.equal(BE.getVersion(), "0.1.0 dev", "Version should read 0.1.0 dev");    TB.hasProperty(BE, "BASE_PATH", "BASE_PATH should be a property of BE");    TB.equal(        BE.BASE_PATH,        new Folder("~/Dropbox/Scripts/AEScripts/BeforeEffects/src/").fsName,        "BE.BASE_PATH should equal the actual BE file base path.");    TB.equal(BE.nameToPath("BE.comp"), "comp/comp.jsxinc", "BE.comp should point to " +        "/comp");    TB.equal(BE.isDef(blah), false, "blah should not be defined");    TB.equal(BE.isDef(BE), true, "BE should be defined");    TB.equal(BE.isNull(null), true, "null should be null");    TB.equal(BE.isNull(x), false, "x should not be null");    TB.strictEqual(BE.isDefAndNotNull(undefined), false, "undefined should not " +        "pass as defined.");    TB.equal(BE.isDefAndNotNull(x), true, "x is defined and not null");    TB.equal(BE.isString(s), true, "s is a string");    TB.equal(BE.isString(x), false, "x is not a string");    TB.equal(BE.isBoolean(t), true, "t is a boolean value.");    TB.equal(BE.isBoolean(x), false, "x is not a boolean value.");    TB.equal(BE.isNumber(x), true, "x is a number.");    TB.equal(BE.isNumber(s), false, "s is not a number");    TB.equal(BE.isFunction(f), true, "f is a function");    TB.equal(BE.isFunction(t), false, "t is not a function");    BE.mixin(b,a);    TB.deepEqual(a, b, "b should be equal to a");    TB.notDeepEqual(a, c, "a should not be deeply equal to c");    TB.equal(BE.typeOf("blah"), "string", "\"blah\" is a string");    TB.equal(BE.isArray(ar), true, "ar is an array");    TB.equal(BE.isArray(x), false, "x is not an array");    TB.equal(BE.isObject(c), true, "c is an object");    TB.equal(BE.isObject(s), false, "s is not an object");    TB.equal(BE.isDateLike(d), true, "d is a date");});//The following tests require visual confirmation as there is no way to//programatically dictate whether the tests passed or failed.//Check the logging functionality//Turn off debuggingBE.setDebugLevel(0);BE.log.debug('This message should not be output to the console.');BE.log.warn('This warning should not be output to the console.');BE.log.error(new Error('This error message should not be seen.'));//Enable basic debug messagesBE.setDebugLevel(1);BE.log.debug('This message should be output to the console.');BE.log.warn('This warning should not be output to the console.');BE.log.error(new Error('This error message should be output to the console.'));//Enable warning debug messagesBE.setDebugLevel(2);BE.log.debug('This message should be output to the console.');BE.log.warn('This warning should be output to the console.');BE.log.error(new Error('This error message should be output to the console.'));//Output a log start messageBE.log.insertLogStart("This is a header message");